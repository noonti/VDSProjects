-- --------------------------------------------------------
-- 호스트:                          127.0.0.1
-- 서버 버전:                        10.4.12-MariaDB - mariadb.org binary distribution
-- 서버 OS:                        Win64
-- HeidiSQL 버전:                  11.1.0.6116
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

-- 테이블 vdsdb.target_summary_info 구조 내보내기
CREATE TABLE IF NOT EXISTS `target_summary_info` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `ID_0` int(11) NOT NULL DEFAULT 0,
  `ID_1` int(11) NOT NULL DEFAULT 0,
  `START_CYCLE_0` int(11) DEFAULT 0,
  `START_CYCLE_1` int(11) DEFAULT 0,
  `AGE_0` int(11) DEFAULT 0,
  `AGE_1` int(11) DEFAULT 0,
  `MAG_MAX_0` int(11) DEFAULT 0,
  `MAG_MAX_1` int(11) DEFAULT 0,
  `LANE` smallint(6) DEFAULT NULL,
  `TRAVEL_DIRECTION` tinyint(4) DEFAULT 0,
  `LENGTH_X100` double(22,3) DEFAULT 0.000,
  `SPEED_X100` double(22,3) DEFAULT 0.000,
  `RANGE_X100` double(22,3) DEFAULT 0.000,
  `OCCUPY_TIME` double(22,3) DEFAULT 0.000,
  `REPORT_YN` varchar(50) DEFAULT 'N',
  `CREATE_TIME` varchar(50) DEFAULT NULL,
  `REG_DATE` datetime DEFAULT sysdate(),
  `MODIFY_DATE` datetime DEFAULT sysdate(),
  KEY `ID` (`ID`),
  KEY `REG_DATE` (`REG_DATE`),
  KEY `CREATE_TIME` (`CREATE_TIME`)
) ENGINE=InnoDB AUTO_INCREMENT=1883015 DEFAULT CHARSET=utf8;

-- 내보낼 데이터가 선택되어 있지 않습니다.

-- 프로시저 vdsdb.SP_ADD_TARGET_SUMMARY_INFO 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_ADD_TARGET_SUMMARY_INFO`(
	INOUT `I_ID` BIGINT,
	IN `I_ID_0` INT,
	IN `I_ID_1` INT,
	IN `I_START_CYCLE_0` INT,
	IN `I_START_CYCLE_1` INT,
	IN `I_AGE_0` INT,
	IN `I_AGE_1` INT,
	IN `I_MAG_MAX_0` INT,
	IN `I_MAG_MAX_1` INT,
	IN `I_LANE` SMALLINT,
	IN `I_TRAVEL_DIRECTION` TINYINT,
	IN `I_LENGTH_X100` DOUBLE,
	IN `I_SPEED_X100` DOUBLE,
	IN `I_RANGE_X100` DOUBLE,
	IN `I_OCCUPY_TIME` DOUBLE,
	IN `I_REPORT_YN` VARCHAR(50),
	IN `I_CREATE_TIME` VARCHAR(50),
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(100),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
	DECLARE errno INT;
	DECLARE errText VARCHAR(500);

	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;
	
	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';

	
	START TRANSACTION;
	INSERT INTO target_summary_info (ID_0, ID_1, START_CYCLE_0, START_CYCLE_1, AGE_0, AGE_1, MAG_MAX_0, MAG_MAX_1, LANE, TRAVEL_DIRECTION, LENGTH_X100, SPEED_X100, RANGE_X100,OCCUPY_TIME, REPORT_YN,CREATE_TIME)
					VALUES(I_ID_0,
					 I_ID_1, I_START_CYCLE_0, I_START_CYCLE_1, I_AGE_0, I_AGE_1, I_MAG_MAX_0, I_MAG_MAX_1, I_LANE, I_TRAVEL_DIRECTION, I_LENGTH_X100, I_SPEED_X100, I_RANGE_X100,I_OCCUPY_TIME, I_REPORT_YN, I_CREATE_TIME);
   SET I_ID = LAST_INSERT_ID();			              
  	SET RESULT_COUNT = ROW_COUNT();	


	COMMIT;
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_ACCU_TRAFFIC_DATA_STAT 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_ACCU_TRAFFIC_DATA_STAT`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
	DECLARE errno INT;
	DECLARE errText VARCHAR(500);
	DECLARE TOTAL_TIME NUMERIC;	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;

	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	-- 1 ~ 32  까지....
	SELECT 	SUM(LOOP_1) LOOP_1 ,SUM(LOOP_2) LOOP_2 ,SUM(LOOP_3) LOOP_3 ,SUM(LOOP_4) LOOP_4 ,SUM(LOOP_5) LOOP_5 ,
			SUM(LOOP_6) LOOP_6 ,SUM(LOOP_7) LOOP_7 ,SUM(LOOP_8) LOOP_8 ,SUM(LOOP_9) LOOP_9 ,SUM(LOOP_10) LOOP_10 ,
			SUM(LOOP_11) LOOP_11 ,SUM(LOOP_12) LOOP_12 ,SUM(LOOP_13) LOOP_13 ,SUM(LOOP_14) LOOP_14 ,SUM(LOOP_15) LOOP_15 ,
			SUM(LOOP_16) LOOP_16 ,SUM(LOOP_17) LOOP_17 ,SUM(LOOP_18) LOOP_18 ,SUM(LOOP_19) LOOP_19 ,SUM(LOOP_20) LOOP_20 ,
			SUM(LOOP_21) LOOP_21 ,SUM(LOOP_22) LOOP_22 ,SUM(LOOP_23) LOOP_23 ,SUM(LOOP_24) LOOP_24 ,SUM(LOOP_25) LOOP_25 ,
			SUM(LOOP_26) LOOP_26 ,SUM(LOOP_27) LOOP_27 ,SUM(LOOP_28) LOOP_28 ,SUM(LOOP_29) LOOP_29 ,SUM(LOOP_30) LOOP_30 ,
			SUM(LOOP_31) LOOP_31 ,SUM(LOOP_32) LOOP_32 
			
FROM (
	SELECT 	CASE WHEN LANE = 1 THEN CNT
							ELSE 0 END LOOP_1 ,
					CASE WHEN LANE = 1 THEN CNT
							ELSE 0 END LOOP_2 ,
		 		
				 	CASE WHEN LANE = 2 THEN CNT
							ELSE 0 END LOOP_3 ,
					CASE WHEN LANE = 2 THEN CNT
							ELSE 0 END LOOP_4 ,
	
					CASE WHEN LANE = 3 THEN CNT
							ELSE 0 END LOOP_5 ,
					CASE WHEN LANE = 3 THEN CNT
							ELSE 0 END LOOP_6 ,
	
					CASE WHEN LANE = 4 THEN CNT	
							ELSE 0 END LOOP_7 ,
					CASE WHEN LANE = 4 THEN CNT
							ELSE 0 END LOOP_8 ,					
							
					CASE WHEN LANE = 5 THEN CNT
							ELSE 0 END LOOP_9 ,					
					CASE WHEN LANE = 5 THEN CNT
							ELSE 0 END LOOP_10 ,					
	
					CASE WHEN LANE = 6 THEN CNT
							ELSE 0 END LOOP_11 ,					
					CASE WHEN LANE = 6 THEN CNT
							ELSE 0 END LOOP_12 ,					
	
	
					CASE WHEN LANE = 7 THEN CNT
							ELSE 0 END LOOP_13 ,					
					CASE WHEN LANE = 7 THEN CNT
							ELSE 0 END LOOP_14 ,					
	
					CASE WHEN LANE = 8 THEN CNT
							ELSE 0 END LOOP_15 ,					
					CASE WHEN LANE = 8 THEN CNT
							ELSE 0 END LOOP_16 ,					
	
					CASE WHEN LANE = 9 THEN CNT
							ELSE 0 END LOOP_17 ,					
					CASE WHEN LANE = 9 THEN CNT
							ELSE 0 END LOOP_18 ,					
	
					CASE WHEN LANE = 10 THEN CNT
							ELSE 0 END LOOP_19 ,					
					CASE WHEN LANE = 10 THEN CNT
							ELSE 0 END LOOP_20 ,					
	
					CASE WHEN LANE = 11 THEN CNT
							ELSE 0 END LOOP_21 ,					
					CASE WHEN LANE = 11 THEN CNT
							ELSE 0 END LOOP_22 ,					
	
					CASE WHEN LANE = 12 THEN CNT
							ELSE 0 END LOOP_23 ,					
					CASE WHEN LANE = 12 THEN CNT
							ELSE 0 END LOOP_24 ,					
	
					CASE WHEN LANE = 13 THEN CNT
							ELSE 0 END LOOP_25 ,					
					CASE WHEN LANE = 13 THEN CNT
							ELSE 0 END LOOP_26 ,					
	
					CASE WHEN LANE = 14 THEN CNT
							ELSE 0 END LOOP_27 ,					
					CASE WHEN LANE = 14 THEN CNT
							ELSE 0 END LOOP_28 ,					
	
					CASE WHEN LANE = 15 THEN CNT
							ELSE 0 END LOOP_29 ,					
					CASE WHEN LANE = 15 THEN CNT
							ELSE 0 END LOOP_30 ,					
	
					CASE WHEN LANE = 16 THEN CNT
							ELSE 0 END LOOP_31 ,					
					CASE WHEN LANE = 16 THEN CNT
							ELSE 0 END LOOP_32					
			FROM (
									
					SELECT LANE, COUNT(*) CNT
					FROM target_summary_info
					WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME < I_END_DATE
					GROUP BY LANE
			) AA 
	) BB;
					
	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_LENGTH_DATA_STAT 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_LENGTH_DATA_STAT`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	IN `I_LANE` INT,
	IN `I_CATEGORY_1` INT,
	IN `I_CATEGORY_2` INT,
	IN `I_CATEGORY_3` INT,
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
	DECLARE errno INT;
	DECLARE errText VARCHAR(500);
	DECLARE TOTAL_TIME NUMERIC;	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;

	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	SELECT LANE, 
						SUM(CATEGORY_1) CATEGORY_1,
						SUM(CATEGORY_2) CATEGORY_2,
						SUM(CATEGORY_12) CATEGORY_12
	FROM (
			SELECT LANE, 
						CASE WHEN ROUND(LENGTH_X100/100,0) >=0 AND ROUND(LENGTH_X100/100,0) <=I_CATEGORY_1 THEN 1 ELSE 0 END CATEGORY_1,
						CASE WHEN ROUND(LENGTH_X100/100,0) > I_CATEGORY_1 AND ROUND(LENGTH_X100/100,0) <= I_CATEGORY_2 THEN 1 ELSE 0 END CATEGORY_2,
						CASE WHEN ROUND(LENGTH_X100/100,0) > I_CATEGORY_2  THEN 1 ELSE 0 END CATEGORY_12
			FROM target_summary_info
			WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME < I_END_DATE AND LANE = I_LANE
	) AA
	GROUP BY LANE ;


	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_SPEED_DATA_STAT 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_SPEED_DATA_STAT`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	IN `I_LANE` INT,
	IN `I_CATEGORY_1` INT,
	IN `I_CATEGORY_2` INT,
	IN `I_CATEGORY_3` INT,
	IN `I_CATEGORY_4` INT,
	IN `I_CATEGORY_5` INT,
	IN `I_CATEGORY_6` INT,
	IN `I_CATEGORY_7` INT,
	IN `I_CATEGORY_8` INT,
	IN `I_CATEGORY_9` INT,
	IN `I_CATEGORY_10` INT,
	IN `I_CATEGORY_11` INT,
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
	DECLARE errno INT;
	DECLARE errText VARCHAR(500);
	DECLARE TOTAL_TIME NUMERIC;	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;

	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	SELECT LANE, 
						SUM(CATEGORY_1) CATEGORY_1,
						SUM(CATEGORY_2) CATEGORY_2,
						SUM(CATEGORY_3) CATEGORY_3,
						SUM(CATEGORY_4) CATEGORY_4,
						SUM(CATEGORY_5) CATEGORY_5,
						SUM(CATEGORY_6) CATEGORY_6,
						SUM(CATEGORY_7) CATEGORY_7,
						SUM(CATEGORY_8) CATEGORY_8,
						SUM(CATEGORY_9) CATEGORY_9,
						SUM(CATEGORY_10) CATEGORY_10,
						SUM(CATEGORY_11) CATEGORY_11,
						SUM(CATEGORY_12) CATEGORY_12
	FROM (
			SELECT LANE, 
						CASE WHEN ROUND(SPEED_X100,0) >=0 AND ROUND(SPEED_X100,0) <=I_CATEGORY_1 THEN 1 ELSE 0 END CATEGORY_1,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_1 AND ROUND(SPEED_X100,0) <= I_CATEGORY_2 THEN 1 ELSE 0 END CATEGORY_2,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_2 AND ROUND(SPEED_X100,0) <= I_CATEGORY_3 THEN 1 ELSE 0 END CATEGORY_3,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_3 AND ROUND(SPEED_X100,0) <= I_CATEGORY_4 THEN 1 ELSE 0 END CATEGORY_4,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_4 AND ROUND(SPEED_X100,0) <= I_CATEGORY_5 THEN 1 ELSE 0 END CATEGORY_5,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_5 AND ROUND(SPEED_X100,0) <= I_CATEGORY_6 THEN 1 ELSE 0 END CATEGORY_6,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_6 AND ROUND(SPEED_X100,0) <= I_CATEGORY_7 THEN 1 ELSE 0 END CATEGORY_7,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_7 AND ROUND(SPEED_X100,0) <= I_CATEGORY_8 THEN 1 ELSE 0 END CATEGORY_8,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_8 AND ROUND(SPEED_X100,0) <= I_CATEGORY_9 THEN 1 ELSE 0 END CATEGORY_9,
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_9 AND ROUND(SPEED_X100,0) <= I_CATEGORY_10 THEN 1 ELSE 0 END CATEGORY_10,		
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_10 AND ROUND(SPEED_X100,0) <= I_CATEGORY_11 THEN 1 ELSE 0 END CATEGORY_11,		
						CASE WHEN ROUND(SPEED_X100,0) > I_CATEGORY_11  THEN 1 ELSE 0 END CATEGORY_12
			FROM target_summary_info
			WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME < I_END_DATE AND LANE = I_LANE
	) AA
	GROUP BY LANE ;


	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_TARGET_SUMMARY_BY_LANE_LIST 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_TARGET_SUMMARY_BY_LANE_LIST`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	IN `I_LANE` INT,
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(100),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
DECLARE errno INT;
	DECLARE errText VARCHAR(500);
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;
	
	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	SELECT ID, ID_0, ID_1, START_CYCLE_0, START_CYCLE_1, AGE_0, AGE_1, MAG_MAX_0, MAG_MAX_1, LANE, TRAVEL_DIRECTION, LENGTH_X100, SPEED_X100, RANGE_X100,OCCUPY_TIME,
			 REPORT_YN,CREATE_TIME,
			 REG_DATE, MODIFY_DATE
	FROM target_summary_info
	WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME <=  I_END_DATE 
			AND CASE WHEN I_LANE = 0 THEN 1 
						ELSE LANE END = 
  				 CASE WHEN I_LANE = 0 THEN 1 
					   ELSE I_LANE END
	ORDER BY ID ASC 
	;

	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_TARGET_SUMMARY_INFO_LIST 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_TARGET_SUMMARY_INFO_LIST`(
	IN `I_SEARCH_TYPE` VARCHAR(50),
	IN `I_ID` INT,
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	IN `I_REPORT_YN` VARCHAR(50),
	IN `I_LIMIT_COUNT` INT,
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(100),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
DECLARE errno INT;
	DECLARE errText VARCHAR(500);
		
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;
	
	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	
	
	IF I_SEARCH_TYPE = 'ID' THEN
		
		SELECT ID, ID_0, ID_1, START_CYCLE_0, START_CYCLE_1, AGE_0, AGE_1, MAG_MAX_0, MAG_MAX_1, LANE, TRAVEL_DIRECTION, LENGTH_X100, SPEED_X100, RANGE_X100,OCCUPY_TIME,
				 REPORT_YN,CREATE_TIME,
				 REG_DATE, MODIFY_DATE
		FROM target_summary_info
	   WHERE ID > I_ID 
		/*
		AND CASE WHEN I_REPORT_YN = ''  THEN 1 ELSE REPORT_YN END = CASE WHEN I_REPORT_YN = '' THEN 1 ELSE I_REPORT_YN END
		*/
		ORDER BY REG_DATE ASC 
		LIMIT I_LIMIT_COUNT
		;

	
	ELSE 
		IF I_START_DATE = '' THEN 
			SET I_START_DATE = '20200501000000'; -- 2020년05월01일 0시로 설정 
		END IF;
		
		IF I_END_DATE = '' THEN
	   	SET I_END_DATE = DATE_FORMAT(SYSDATE(),'%Y%m%d%H%i%s') ; -- 현재 시간으로 설정
		END IF;
	
		SELECT ID, ID_0, ID_1, START_CYCLE_0, START_CYCLE_1, AGE_0, AGE_1, MAG_MAX_0, MAG_MAX_1, LANE, TRAVEL_DIRECTION, LENGTH_X100, SPEED_X100, RANGE_X100,OCCUPY_TIME,
				 REPORT_YN,CREATE_TIME,
				 REG_DATE, MODIFY_DATE
		FROM target_summary_info
	   WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME <=  I_END_DATE 
		ORDER BY ID ASC 
		LIMIT I_LIMIT_COUNT
		;
	END IF;

	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_TARGET_SUMMARY_STAT 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_TARGET_SUMMARY_STAT`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
DECLARE errno INT;
	DECLARE errText VARCHAR(500);
		
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;

	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	
	SELECT LANE, COUNT(ID) COUNT
	FROM target_summary_info
	WHERE REG_DATE >= STR_TO_DATE(I_START_DATE, '%Y%m%d%H%i%s') AND REG_DATE <=  STR_TO_DATE(I_END_DATE, '%Y%m%d%H%i%s') 
	GROUP BY LANE;
	
	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_GET_TRAFFIC_DATA_STAT 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_GET_TRAFFIC_DATA_STAT`(
	IN `I_START_DATE` VARCHAR(50),
	IN `I_END_DATE` VARCHAR(50),
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)
)
BEGIN
DECLARE errno INT;
	DECLARE errText VARCHAR(500);
	DECLARE TOTAL_TIME NUMERIC;	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;

	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
	
	SET TOTAL_TIME = TIMESTAMPDIFF(MICROSECOND,I_START_DATE , I_END_DATE)/1000 ;
	
	SELECT LANE,
				COUNT(*) TRAFFIC_COUNT, 
				ROUND(SUM(OCCUPY_TIME)*100/TOTAL_TIME,2) OCCUPY_RATIO,             -- milisecond 
				ROUND(AVG(SPEED_X100),2) AVG_SPEED,       -- km/h
				ROUND(AVG(LENGTH_X100/100),2) AVG_LENGTH  -- /100 : m 
	FROM target_summary_info 
	WHERE CREATE_TIME >= I_START_DATE AND CREATE_TIME < I_END_DATE AND LANE <> 255
	GROUP BY  LANE ;

	SET RESULT_COUNT = FOUND_ROWS();
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

-- 프로시저 vdsdb.SP_UPDATE_TARGET_REPORT_YN 구조 내보내기
DELIMITER //
CREATE PROCEDURE `SP_UPDATE_TARGET_REPORT_YN`(
	IN `I_IDS` VARCHAR(20000),
	IN `I_REPORT_YN` VARCHAR(50),
	OUT `RESULT_COUNT` INT,
	OUT `RESULT_CODE` VARCHAR(50),
	OUT `ERROR_MESSAGE` VARCHAR(300)

)
BEGIN
	DECLARE errno INT;
	DECLARE errText VARCHAR(500);
   DECLARE ID_LIST LONGTEXT;
	DECLARE SPLIT_CHAR VARCHAR(10);
	DECLARE STR_VALUE VARCHAR(20) ;
	
	DECLARE exit handler for SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 
             errno = MYSQL_ERRNO , errText = MESSAGE_TEXT;
      
      SET ERROR_MESSAGE = CONCAT('Error No: ',errno,', Message=' ,errText);
		SET RESULT_CODE ='500';
		ROLLBACK;

		
	END;
	
	SET RESULT_COUNT = 0;
	SET RESULT_CODE ='100';
	SET ERROR_MESSAGE = '';
   SET SPLIT_CHAR = ',';
	
	START TRANSACTION;
	
	
	-- DROP TEMPORARY TABLE IF EXISTS TB_IDLIST;
	-- CREATE TEMPORARY TABLE TB_IDLIST
	-- (
	--   ID BIGINT NOT NULL PRIMARY KEY
	-- ) ENGINE = MEMORY;
 
   SET ID_LIST = I_IDS;
   
	WHILE IFNULL(ID_LIST, '') != '' DO
	   SET STR_VALUE = SUBSTRING_INDEX(ID_LIST, SPLIT_CHAR, 1);
	   SET ID_LIST = SUBSTRING(ID_LIST, CHAR_LENGTH(STR_VALUE) + CHAR_LENGTH(SPLIT_CHAR) + 1);
	  -- INSERT INTO TB_IDLIST (ID) VALUES (CONVERT(STR_VALUE, UNSIGNED));
	  	UPDATE target_summary_info SET
			REPORT_YN = I_REPORT_YN
		WHERE ID = CONVERT(STR_VALUE, UNSIGNED);
		SET RESULT_COUNT = RESULT_COUNT + ROW_COUNT();
	END WHILE;
        
--	UPDATE target_summary_info SET
--		REPORT_YN = I_REPORT_YN
--	WHERE ID IN (SELECT ID FROM TB_IDLIST );

--  	SET RESULT_COUNT = ROW_COUNT();	

	COMMIT;
	SET RESULT_CODE = '100';
	SET ERROR_MESSAGE = 'SUCCESS';
END//
DELIMITER ;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
